#version 450
#extension GL_EXT_samplerless_texture_functions : enable
layout(push_constant) uniform pushconsts_t { uvec4 v; } pc; // = { -1, 0, 0, 0 };
layout(set = 0, binding = 0) uniform utexture2DArray inputSrv;
layout(set = 0, binding = 1, r32ui) uniform uimage2D outputUav;
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main()
{
   uvec2 tid = gl_GlobalInvocationID.xy;
   uvec3 c;
   c.x = tid.x + 1; // rightmost goes OOB
   c.y = tid.y;
   c.z = tid.y < 7u ? tid.y : pc.v.x;
   uvec4 data = texelFetch(inputSrv, ivec3(c), 0); // lod
   imageStore(outputUav, ivec2(tid), data);
}

// glslc --target-env=vulkan1.1 -O -mfmt=c ld_srv_typed_2darray.comp -o ld_srv_typed_2darray.comp.h

// glslc --target-env=vulkan1.1 -O ld_srv_typed_2darray.comp -o - | spirv-dis --offsets --comment

/*
; SPIR-V
; Version: 1.3
; Generator: Google Shaderc over Glslang; 10
; Bound: 82
; Schema: 0
               OpCapability Shader ; 0x00000014
          %1 = OpExtInstImport "GLSL.std.450" ; 0x0000001c
               OpMemoryModel Logical GLSL450 ; 0x00000034
               OpEntryPoint GLCompute %4 "main" %gl_GlobalInvocationID ; 0x00000040
               OpExecutionMode %4 LocalSize 8 8 1 ; 0x00000058

               ; Annotations
               OpDecorate %gl_GlobalInvocationID BuiltIn GlobalInvocationId ; 0x00000070
               OpMemberDecorate %_struct_39 0 Offset 0 ; 0x00000080
               OpDecorate %_struct_39 Block ; 0x00000094
               OpDecorate %54 DescriptorSet 0 ; 0x000000a0
               OpDecorate %54 Binding 0 ; 0x000000b0
               OpDecorate %62 DescriptorSet 0 ; 0x000000c0
               OpDecorate %62 Binding 1 ; 0x000000d0
               OpDecorate %gl_WorkGroupSize BuiltIn WorkgroupSize ; 0x000000e0

               ; Types, variables and constants
       %void = OpTypeVoid ; 0x000000f0
          %3 = OpTypeFunction %void ; 0x000000f8
       %uint = OpTypeInt 32 0 ; 0x00000104
     %v2uint = OpTypeVector %uint 2 ; 0x00000114
     %v3uint = OpTypeVector %uint 3 ; 0x00000124
%_ptr_Input_v3uint = OpTypePointer Input %v3uint ; 0x00000134
%gl_GlobalInvocationID = OpVariable %_ptr_Input_v3uint Input ; 0x00000144
     %uint_0 = OpConstant %uint 0 ; 0x00000154
     %uint_1 = OpConstant %uint 1 ; 0x00000164
     %uint_7 = OpConstant %uint 7 ; 0x00000174
       %bool = OpTypeBool ; 0x00000184
     %v4uint = OpTypeVector %uint 4 ; 0x0000018c
 %_struct_39 = OpTypeStruct %v4uint ; 0x0000019c
%_ptr_PushConstant__struct_39 = OpTypePointer PushConstant %_struct_39 ; 0x000001a8
         %41 = OpVariable %_ptr_PushConstant__struct_39 PushConstant ; 0x000001b8
        %int = OpTypeInt 32 1 ; 0x000001c8
      %int_0 = OpConstant %int 0 ; 0x000001d8
%_ptr_PushConstant_uint = OpTypePointer PushConstant %uint ; 0x000001e8
         %52 = OpTypeImage %uint 2D 0 1 0 1 Unknown ; 0x000001f8
%_ptr_UniformConstant_52 = OpTypePointer UniformConstant %52 ; 0x0000021c
         %54 = OpVariable %_ptr_UniformConstant_52 UniformConstant ; 0x0000022c
      %v3int = OpTypeVector %int 3 ; 0x0000023c
         %60 = OpTypeImage %uint 2D 0 0 0 2 R32ui ; 0x0000024c
%_ptr_UniformConstant_60 = OpTypePointer UniformConstant %60 ; 0x00000270
         %62 = OpVariable %_ptr_UniformConstant_60 UniformConstant ; 0x00000280
      %v2int = OpTypeVector %int 2 ; 0x00000290
     %uint_8 = OpConstant %uint 8 ; 0x000002a0
%gl_WorkGroupSize = OpConstantComposite %v3uint %uint_8 %uint_8 %uint_1 ; 0x000002b0
         %80 = OpUndef %v3uint ; 0x000002c8

               ; Function 4
          %4 = OpFunction %void None %3 ; 0x000002d4
          %5 = OpLabel ; 0x000002e8
         %13 = OpLoad %v3uint %gl_GlobalInvocationID ; 0x000002f0
         %14 = OpVectorShuffle %v2uint %13 %13 0 1 ; 0x00000300
         %20 = OpCompositeExtract %uint %13 0 ; 0x0000031c
         %22 = OpIAdd %uint %20 %uint_1 ; 0x00000330
         %72 = OpCompositeInsert %v3uint %22 %80 0 ; 0x00000344
         %25 = OpCompositeExtract %uint %13 1 ; 0x0000035c
         %75 = OpCompositeInsert %v3uint %25 %72 1 ; 0x00000370
         %31 = OpULessThan %bool %25 %uint_7 ; 0x00000388
               OpSelectionMerge %34 None ; 0x0000039c
               OpBranchConditional %31 %33 %37 ; 0x000003a8
         %33 = OpLabel ; 0x000003b8
               OpBranch %34 ; 0x000003c0
         %37 = OpLabel ; 0x000003c8
         %45 = OpAccessChain %_ptr_PushConstant_uint %41 %int_0 %uint_0 ; 0x000003d0
         %46 = OpLoad %uint %45 ; 0x000003e8
               OpBranch %34 ; 0x000003f8
         %34 = OpLabel ; 0x00000400
         %81 = OpPhi %uint %25 %33 %46 %37 ; 0x00000408
         %79 = OpCompositeInsert %v3uint %81 %75 2 ; 0x00000424
         %55 = OpLoad %52 %54 ; 0x0000043c
         %58 = OpBitcast %v3int %79 ; 0x0000044c
         %59 = OpImageFetch %v4uint %55 %58 Lod %int_0 ; 0x0000045c
         %63 = OpLoad %60 %62 ; 0x00000478
         %66 = OpBitcast %v2int %14 ; 0x00000488
               OpImageWrite %63 %66 %59 ; 0x00000498
               OpReturn ; 0x000004a8
               OpFunctionEnd ; 0x000004ac
*/

